{
    "rootProps": [
        {
            "prop": "open",
            "type": ["boolean"],
            "default": "undefined",
            "description": "팝오버의 열림 상태를 제어합니다. 이 prop이 제공되면 컴포넌트가 제어 모드로 동작합니다."
        },
        {
            "prop": "defaultOpen",
            "type": ["boolean"],
            "default": "false",
            "description": "팝오버의 초기 열림 상태를 설정합니다. 비제어 모드에서만 사용됩니다."
        },
        {
            "prop": "onOpenChange",
            "type": ["(open: boolean, event?: Event, reason?: string) => void"],
            "default": "undefined",
            "description": "팝오버의 열림 상태가 변경될 때 호출되는 콜백 함수입니다. open 상태, 이벤트, 그리고 변경 이유를 인자로 받습니다."
        },
        {
            "prop": "modal",
            "type": ["boolean", "{ trapFocus?: boolean }"],
            "default": "true",
            "description": "팝오버가 모달 형태로 동작할지 여부를 설정합니다. true일 때 배경을 클릭하면 팝오버가 닫히고 포커스 트랩이 적용됩니다."
        },
        {
            "prop": "openOnHover",
            "type": ["boolean"],
            "default": "false",
            "description": "마우스 호버 시 팝오버를 열지 여부를 설정합니다."
        },
        {
            "prop": "delay",
            "type": ["number", "{ open?: number; close?: number }"],
            "default": "0",
            "description": "팝오버 열기/닫기 지연 시간을 밀리초 단위로 설정합니다."
        }
    ],
    "triggerProps": [
        {
            "prop": "render",
            "type": [
                "React.ReactElement",
                "(props: TriggerProps, state: TriggerState) => React.ReactElement"
            ],
            "default": "undefined",
            "description": "트리거 요소를 렌더링하는 함수 또는 컴포넌트입니다. 함수로 제공될 경우 props와 state를 인자로 받습니다."
        },
        {
            "prop": "disabled",
            "type": ["boolean"],
            "default": "false",
            "description": "트리거 요소를 비활성화할지 여부를 설정합니다."
        }
    ],
    "contentProps": [
        {
            "prop": "portalProps",
            "type": ["PopoverPortalProps"],
            "default": "undefined",
            "description": "Portal 컴포넌트에 전달될 props입니다. 팝오버가 렌더링될 위치와 관련된 설정을 제어합니다."
        },
        {
            "prop": "positionerProps",
            "type": ["PopoverPositionerProps"],
            "default": "undefined",
            "description": "Positioner 컴포넌트에 전달될 props입니다. 팝오버의 위치와 정렬에 관한 설정을 제어합니다."
        },
        {
            "prop": "className",
            "type": ["string"],
            "default": "undefined",
            "description": "팝오버 컨텐츠에 적용할 CSS 클래스명입니다."
        }
    ],
    "portalProps": [
        {
            "prop": "container",
            "type": ["HTMLElement", "() => HTMLElement", "null"],
            "default": "document.body",
            "description": "팝오버가 렌더링될 컨테이너 요소를 지정합니다. null을 전달하면 포탈을 사용하지 않고 인라인으로 렌더링합니다."
        },
        {
            "prop": "keepMounted",
            "type": ["boolean"],
            "default": "false",
            "description": "팝오버가 닫혀있을 때도 DOM에 마운트된 상태를 유지할지 여부를 설정합니다."
        }
    ],
    "positionerProps": [
        {
            "prop": "side",
            "type": ["'top'", "'right'", "'bottom'", "'left'"],
            "default": "'bottom'",
            "description": "팝오버가 표시될 기본 방향을 설정합니다. 공간이 부족할 경우 자동으로 다른 방향으로 조정될 수 있습니다."
        },
        {
            "prop": "align",
            "type": ["'start'", "'center'", "'end'"],
            "default": "'center'",
            "description": "팝오버의 정렬 방향을 설정합니다. side 축에 수직인 축에서의 정렬을 제어합니다."
        },
        {
            "prop": "sideOffset",
            "type": ["number", "(side: Side) => number"],
            "default": "8",
            "description": "트리거와 팝오버 사이의 거리(픽셀)를 설정합니다. 함수로 제공하면 방향에 따라 다른 값을 설정할 수 있습니다."
        },
        {
            "prop": "alignOffset",
            "type": ["number", "(side: Side) => number"],
            "default": "0",
            "description": "정렬 축에서의 오프셋(픽셀)을 설정합니다. 양수는 end 방향으로, 음수는 start 방향으로 이동합니다."
        },
        {
            "prop": "collisionPadding",
            "type": ["number", "{ top?: number; right?: number; bottom?: number; left?: number }"],
            "default": "8",
            "description": "충돌 감지 시 사용할 패딩 값을 설정합니다. 뷰포트 경계에서 이 값만큼 여백을 두고 충돌을 감지합니다."
        },
        {
            "prop": "collisionAvoidance",
            "type": [
                "boolean",
                "{ boundary?: HTMLElement; rootBoundary?: 'viewport' | 'document'; padding?: number }"
            ],
            "default": "true",
            "description": "충돌 회피 동작을 설정합니다. false로 설정하면 충돌 감지를 비활성화합니다."
        },
        {
            "prop": "arrowPadding",
            "type": ["number"],
            "default": "4",
            "description": "화살표와 팝오버 모서리 사이의 최소 거리를 픽셀 단위로 설정합니다."
        },
        {
            "prop": "sticky",
            "type": ["boolean", "'partial'"],
            "default": "false",
            "description": "팝오버가 트리거를 따라 이동할지 여부를 설정합니다. 'partial'로 설정하면 부분적으로만 따라갑니다."
        }
    ],
    "popupProps": [
        {
            "prop": "className",
            "type": ["string"],
            "default": "undefined",
            "description": "팝오버 팝업에 적용할 CSS 클래스명입니다."
        },
        {
            "prop": "style",
            "type": ["CSSProperties"],
            "default": "undefined",
            "description": "팝오버 팝업에 적용할 인라인 스타일입니다."
        },
        {
            "prop": "render",
            "type": [
                "React.ReactElement",
                "(props: PopupProps, state: PopupState) => React.ReactElement"
            ],
            "default": "undefined",
            "description": "팝업 요소를 렌더링하는 함수 또는 컴포넌트입니다."
        }
    ],
    "arrowProps": [
        {
            "prop": "className",
            "type": ["string"],
            "default": "undefined",
            "description": "화살표에 적용할 CSS 클래스명입니다."
        },
        {
            "prop": "render",
            "type": ["React.ReactElement", "(props: ArrowProps) => React.ReactElement"],
            "default": "undefined",
            "description": "화살표 요소를 렌더링하는 함수 또는 컴포넌트입니다."
        }
    ],
    "titleProps": [
        {
            "prop": "render",
            "type": ["React.ReactElement", "(props: TitleProps) => React.ReactElement"],
            "default": "undefined",
            "description": "제목 요소를 렌더링하는 함수 또는 컴포넌트입니다."
        }
    ],
    "descriptionProps": [
        {
            "prop": "render",
            "type": ["React.ReactElement", "(props: DescriptionProps) => React.ReactElement"],
            "default": "undefined",
            "description": "설명 요소를 렌더링하는 함수 또는 컴포넌트입니다."
        }
    ],
    "closeProps": [
        {
            "prop": "render",
            "type": ["React.ReactElement", "(props: CloseProps) => React.ReactElement"],
            "default": "undefined",
            "description": "닫기 버튼을 렌더링하는 함수 또는 컴포넌트입니다."
        }
    ],
    "backdropProps": [
        {
            "prop": "className",
            "type": ["string"],
            "default": "undefined",
            "description": "배경 오버레이에 적용할 CSS 클래스명입니다."
        },
        {
            "prop": "render",
            "type": ["React.ReactElement", "(props: BackdropProps) => React.ReactElement"],
            "default": "undefined",
            "description": "배경 오버레이 요소를 렌더링하는 함수 또는 컴포넌트입니다."
        },
        {
            "prop": "keepMounted",
            "type": ["boolean"],
            "default": "false",
            "description": "팝오버가 닫혀있을 때도 배경을 DOM에 마운트된 상태로 유지할지 여부를 설정합니다."
        }
    ]
}
