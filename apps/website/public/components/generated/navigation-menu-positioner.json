{
    "name": "NavigationMenuPositioner",
    "displayName": "NavigationMenu.Positioner",
    "description": "Positions the navigation menu popup relative to its trigger element. Renders a <div> element.",
    "props": [
        {
            "name": "className",
            "type": ["string", "(state: State) => string"],
            "required": false,
            "description": "CSS class applied to the element, or a function that\nreturns a class based on the component’s state."
        },
        {
            "name": "align",
            "type": ["center", "end", "start"],
            "required": false,
            "description": "How to align the popup relative to the specified side.",
            "defaultValue": "'center'"
        },
        {
            "name": "render",
            "type": ["ReactElement"],
            "required": false,
            "description": "Allows you to replace the component’s HTML element\nwith a different tag, or compose it with another component.\n\nAccepts a `ReactElement` or a function that returns the element to render."
        },
        {
            "name": "anchor",
            "type": [
                "null",
                "Element",
                "VirtualElement",
                "RefObject<Element | null>",
                "() => Element | VirtualElement | null"
            ],
            "required": false,
            "description": "An element to position the popup against.\nBy default, the popup will be positioned against the trigger."
        },
        {
            "name": "sticky",
            "type": ["false", "true"],
            "required": false,
            "description": "Whether to maintain the popup in the viewport after\nthe anchor element was scrolled out of view.",
            "defaultValue": "false"
        },
        {
            "name": "positionMethod",
            "type": ["fixed", "absolute"],
            "required": false,
            "description": "Determines which CSS `position` property to use.",
            "defaultValue": "'absolute'"
        },
        {
            "name": "side",
            "type": ["bottom", "left", "right", "top", "inline-end", "inline-start"],
            "required": false,
            "description": "Which side of the anchor element to align the popup against.\nMay automatically change to avoid collisions.",
            "defaultValue": "'bottom'"
        },
        {
            "name": "sideOffset",
            "type": ["number", "OffsetFunction"],
            "required": false,
            "description": "Distance between the anchor and the popup in pixels.\nAlso accepts a function that returns the distance to read the dimensions of the anchor\nand positioner elements, along with its side and alignment.\n\n- `data.anchor`: the dimensions of the anchor element with properties `width` and `height`.\n- `data.positioner`: the dimensions of the positioner element with properties `width` and `height`.\n- `data.side`: which side of the anchor element the positioner is aligned against.\n- `data.align`: how the positioner is aligned relative to the specified side.",
            "defaultValue": "0"
        },
        {
            "name": "alignOffset",
            "type": ["number", "OffsetFunction"],
            "required": false,
            "description": "Additional offset along the alignment axis in pixels.\nAlso accepts a function that returns the offset to read the dimensions of the anchor\nand positioner elements, along with its side and alignment.\n\n- `data.anchor`: the dimensions of the anchor element with properties `width` and `height`.\n- `data.positioner`: the dimensions of the positioner element with properties `width` and `height`.\n- `data.side`: which side of the anchor element the positioner is aligned against.\n- `data.align`: how the positioner is aligned relative to the specified side.",
            "defaultValue": "0"
        },
        {
            "name": "collisionBoundary",
            "type": [
                "Element",
                "clipping-ancestors",
                "Element[]",
                "{ x: number; y: number; height: number; width: number; }"
            ],
            "required": false,
            "description": "An element or a rectangle that delimits the area that the popup is confined to.",
            "defaultValue": "'clipping-ancestors'"
        },
        {
            "name": "collisionPadding",
            "type": [
                "number",
                "{ bottom?: number | undefined; left?: number | undefined; right?: number | undefined; top?: number | undefined; }"
            ],
            "required": false,
            "description": "Additional space to maintain from the edge of the collision boundary.",
            "defaultValue": "5"
        },
        {
            "name": "arrowPadding",
            "type": ["number"],
            "required": false,
            "description": "Minimum distance to maintain between the arrow and the edges of the popup.\n\nUse it to prevent the arrow element from hanging out of the rounded corners of a popup.",
            "defaultValue": "5"
        },
        {
            "name": "trackAnchor",
            "type": ["false", "true"],
            "required": false,
            "description": "Whether the popup tracks any layout shift of its positioning anchor.",
            "defaultValue": "true"
        },
        {
            "name": "collisionAvoidance",
            "type": ["SideFlipMode", "SideShiftMode"],
            "required": false,
            "description": "Determines how to handle collisions when positioning the popup."
        }
    ],
    "generatedAt": "2025-10-13T01:02:05.767Z",
    "sourceFile": "/Users/goorm/design-system/gds/vapor-ui/packages/core/src/components/navigation-menu/navigation-menu.tsx"
}
