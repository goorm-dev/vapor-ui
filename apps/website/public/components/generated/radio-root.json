{
    "name": "RadioRoot",
    "displayName": "RadioGroup.Root",
    "description": "Renders a radio button input with visual indicator. Renders a <button> element.",
    "props": [
        {
            "name": "className",
            "type": ["string", "(state: State) => string"],
            "required": false,
            "description": "CSS class applied to the element, or a function that\nreturns a class based on the component’s state."
        },
        {
            "name": "disabled",
            "type": ["false", "true"],
            "required": false,
            "description": "Whether the component should ignore user interaction.",
            "defaultValue": "false"
        },
        {
            "name": "value",
            "type": "any",
            "required": true,
            "description": "The unique identifying value of the radio in a group."
        },
        {
            "name": "readOnly",
            "type": ["false", "true"],
            "required": false,
            "description": "Whether the user should be unable to select the radio button.",
            "defaultValue": "false"
        },
        {
            "name": "required",
            "type": ["false", "true"],
            "required": false,
            "description": "Whether the user must choose a value before submitting a form.",
            "defaultValue": "false"
        },
        {
            "name": "size",
            "type": ["md", "lg"],
            "required": false,
            "description": "Use the size prop to change the size of the radio button",
            "defaultValue": "md"
        },
        {
            "name": "render",
            "type": [
                "ReactElement<Record<string, unknown>, string | JSXElementConstructor<any>>",
                "ReactElement<Record<string, unknown>, string | JSXElementConstructor<any>> & ComponentRenderFn<HTMLProps, {}>",
                "ComponentRenderFn<HTMLProps<any>, State> & ReactElement<Record<string, unknown>, string | JSXElementConstructor<any>>",
                "ComponentRenderFn<HTMLProps<any>, State> & ComponentRenderFn<HTMLProps, {}>"
            ],
            "required": false,
            "description": "Allows you to replace the component’s HTML element\nwith a different tag, or compose it with another component.\n\nAccepts a `ReactElement` or a function that returns the element to render."
        },
        {
            "name": "inputRef",
            "type": [
                "null",
                "(instance: HTMLInputElement | null) => void",
                "RefObject<HTMLInputElement>"
            ],
            "required": false,
            "description": "A ref to access the hidden input element."
        },
        {
            "name": "nativeButton",
            "type": ["false", "true"],
            "required": false,
            "description": "Whether the component renders a native `<button>` element when replacing it\nvia the `render` prop.\nSet to `false` if the rendered element is not a button (e.g. `<div>`).",
            "defaultValue": "true"
        },
        {
            "name": "invalid",
            "type": ["false", "true"],
            "required": false,
            "description": "Use the invalid prop to indicate validation errors",
            "defaultValue": "false"
        }
    ],
    "generatedAt": "2025-10-02T01:23:22.910Z",
    "sourceFile": "/Users/goorm/design-system/gds/vapor-ui/packages/core/src/components/radio/radio.tsx"
}
