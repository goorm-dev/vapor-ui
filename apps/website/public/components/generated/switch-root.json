{
    "name": "SwitchRoot",
    "description": "Renders a toggle switch for boolean input. Renders a <button> element.",
    "props": [
        {
            "name": "className",
            "type": ["string", "(state: State) => string"],
            "required": false,
            "description": "CSS class applied to the element, or a function that\nreturns a class based on the component’s state."
        },
        {
            "name": "id",
            "type": ["string"],
            "required": false,
            "description": "The id of the switch element."
        },
        {
            "name": "name",
            "type": ["string"],
            "required": false,
            "description": "Identifies the field when a form is submitted."
        },
        {
            "name": "defaultChecked",
            "type": ["false", "true"],
            "required": false,
            "description": "Whether the switch is initially active.\n\nTo render a controlled switch, use the `checked` prop instead.",
            "defaultValue": "false"
        },
        {
            "name": "disabled",
            "type": ["false", "true"],
            "required": false,
            "description": "Whether the component should ignore user interaction.",
            "defaultValue": "false"
        },
        {
            "name": "checked",
            "type": ["false", "true"],
            "required": false,
            "description": "Whether the switch is currently active.\n\nTo render an uncontrolled switch, use the `defaultChecked` prop instead."
        },
        {
            "name": "readOnly",
            "type": ["false", "true"],
            "required": false,
            "description": "Whether the user should be unable to activate or deactivate the switch.",
            "defaultValue": "false"
        },
        {
            "name": "required",
            "type": ["false", "true"],
            "required": false,
            "description": "Whether the user must activate the switch before submitting a form.",
            "defaultValue": "false"
        },
        {
            "name": "size",
            "type": ["sm", "md", "lg"],
            "required": false,
            "description": "Use the size prop to change the size of the switch"
        },
        {
            "name": "render",
            "type": ["ReactElement"],
            "required": false,
            "description": "Allows you to replace the component’s HTML element\nwith a different tag, or compose it with another component.\n\nAccepts a `ReactElement` or a function that returns the element to render."
        },
        {
            "name": "onCheckedChange",
            "type": ["(checked: boolean, event: Event) => void"],
            "required": false,
            "description": "Event handler called when the switch is activated or deactivated."
        },
        {
            "name": "inputRef",
            "type": [
                "null",
                "(instance: HTMLInputElement | null) => void",
                "RefObject<HTMLInputElement>"
            ],
            "required": false,
            "description": "A ref to access the hidden `<input>` element."
        },
        {
            "name": "nativeButton",
            "type": ["false", "true"],
            "required": false,
            "description": "Whether the component renders a native `<button>` element when replacing it\nvia the `render` prop.\nSet to `false` if the rendered element is not a button (e.g. `<div>`).",
            "defaultValue": "true"
        }
    ],
    "generatedAt": "2025-10-13T01:02:06.012Z",
    "sourceFile": "/Users/goorm/design-system/gds/vapor-ui/packages/core/src/components/switch/switch.tsx"
}
